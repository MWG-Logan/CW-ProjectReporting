@page "/"
@using Bezalu.ProjectReporting.Web.DTOs
@inject HttpClient Http
@using Markdig

<PageTitle>Project Report</PageTitle>

<h1 class="mb-3">Project Completion Report</h1>

<div class="card p-3 mb-3 shadow-sm">
    <div class="row g-2 align-items-end">
        <div class="col-auto">
            <label for="projectId" class="form-label">Project ID</label>
            <input id="projectId" type="number" class="form-control" style="width:120px" @bind="projectId" />
        </div>
        <div class="col-auto">
            <button class="btn btn-primary mt-4" @onclick="GenerateReport" disabled="@(loading || projectId <= 0)">Generate Report</button>
        </div>
    </div>
    @if (errorMessage != null)
    {
        <div class="alert alert-danger mt-3 mb-0">@errorMessage</div>
    }
    @if (loading)
    {
        <div class="mt-3 mb-0">
            <span class="spinner-border spinner-border-sm" /> Loading...
        </div>
    }
</div>

@if (report != null)
{
    <div class="report-container" id="report-content">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <h2 class="h4 mb-0">@report.ProjectName <small class="text-muted">(#@report.ProjectId)</small></h2>
            <button class="btn btn-outline-secondary btn-sm" @onclick="ExportPdf">Export PDF</button>
        </div>
        <div class="meta small text-muted mb-3">
            <span class="me-3"><strong>Status:</strong> @report.Summary?.Status</span>
            <span class="me-3"><strong>Manager:</strong> @report.Summary?.Manager</span>
            <span class="me-3"><strong>Company:</strong> @report.Summary?.Company</span>
            <span><strong>Generated:</strong> @report.GeneratedAt.ToLocalTime()</span>
        </div>

        @if (!string.IsNullOrWhiteSpace(report.AiGeneratedSummary))
        {
            <section class="mb-4">
                <h3 class="h5">AI Summary</h3>
                <div class="markdown" @onclick="ToggleWrap">
                    @((MarkupString)markdownHtml)
                </div>
            </section>
        }
        @if (report.Timeline != null)
        {
            <section class="mb-4">
                <h3 class="h6 text-uppercase text-secondary">Timeline</h3>
                <div class="row row-cols-2 row-cols-md-4 g-2 small">
                    <div class="col"><div class="stat"><span class="label">Planned Days</span><span class="value">@report.Timeline.PlannedDays</span></div></div>
                    <div class="col"><div class="stat"><span class="label">Actual Days</span><span class="value">@report.Timeline.TotalDays</span></div></div>
                    <div class="col"><div class="stat"><span class="label">Variance</span><span class="value">@report.Timeline.VarianceDays (@report.Timeline.ScheduleAdherence)</span></div></div>
                    <div class="col"><div class="stat"><span class="label">Performance</span><span class="value">@report.Timeline.SchedulePerformance</span></div></div>
                </div>
            </section>
        }
        @if (report.Budget != null)
        {
            <section class="mb-4">
                <h3 class="h6 text-uppercase text-secondary">Budget</h3>
                <div class="row row-cols-2 row-cols-md-4 g-2 small">
                    <div class="col"><div class="stat"><span class="label">Estimated Hrs</span><span class="value">@report.Budget.EstimatedHours</span></div></div>
                    <div class="col"><div class="stat"><span class="label">Actual Hrs</span><span class="value">@report.Budget.ActualHours</span></div></div>
                    <div class="col"><div class="stat"><span class="label">Variance</span><span class="value">@report.Budget.VarianceHours (@report.Budget.BudgetAdherence)</span></div></div>
                    <div class="col"><div class="stat"><span class="label">Cost Perf.</span><span class="value">@report.Budget.CostPerformance</span></div></div>
                </div>
            </section>
        }
        @if (report.Phases?.Any() == true)
        {
            <section class="mb-4">
                <h3 class="h6 text-uppercase text-secondary">Phases (@report.Phases.Count)</h3>
                <table class="table table-striped table-bordered table-sm align-middle small">
                    <thead class="table-light">
                        <tr>
                            <th>Phase</th>
                            <th>Status</th>
                            <th>Est Hrs</th>
                            <th>Act Hrs</th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (var p in report.Phases)
                    {
                        <tr>
                            <td>@p.PhaseName</td>
                            <td><span class="badge bg-@(p.Status == "Closed" ? "success" : "secondary")">@p.Status</span></td>
                            <td>@p.EstimatedHours</td>
                            <td>@p.ActualHours</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </section>
        }
        @if (report.Tickets?.Any() == true)
        {
            <section class="mb-4">
                <h3 class="h6 text-uppercase text-secondary">Tickets (@report.Tickets.Count)</h3>
                <table class="table table-hover table-bordered table-sm align-middle small">
                    <thead class="table-light">
                        <tr>
                            <th>#</th>
                            <th>Summary</th>
                            <th>Status</th>
                            <th>Est/Act Hrs</th>
                            <th>Assigned</th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (var t in report.Tickets)
                    {
                        <tr>
                            <td>@t.TicketNumber</td>
                            <td>@t.Summary</td>
                            <td><span class="badge bg-@(t.Status == "Closed" ? "success" : "info")">@t.Status</span></td>
                            <td>@t.EstimatedHours / @t.ActualHours</td>
                            <td>@t.AssignedTo</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </section>
        }
    </div>
}

@code {
    private int projectId;
    private bool loading;
    private string? errorMessage;
    private ProjectCompletionReportResponse? report;
    private string markdownHtml = string.Empty;

    private async Task GenerateReport()
    {
        errorMessage = null;
        report = null;
        markdownHtml = string.Empty;
        loading = true;
        try
        {
            var req = new ProjectCompletionReportRequest { ProjectId = projectId };
            var response = await Http.PostAsJsonAsync("api/reports/project-completion", req);
            if (response.IsSuccessStatusCode)
            {
                report = await response.Content.ReadFromJsonAsync<ProjectCompletionReportResponse>();
                if (!string.IsNullOrWhiteSpace(report?.AiGeneratedSummary))
                {
                    var pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
                    markdownHtml = Markdown.ToHtml(report.AiGeneratedSummary, pipeline);
                }
            }
            else
            {
                errorMessage = $"Error: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ExportPdf()
    {
        if (report == null) return;
        await JSRuntime.InvokeVoidAsync("exportReportPdf", "report-content", $"ProjectReport-{report.ProjectId}.pdf");
    }

    private void ToggleWrap() { /* placeholder for future interaction */ }

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
}
