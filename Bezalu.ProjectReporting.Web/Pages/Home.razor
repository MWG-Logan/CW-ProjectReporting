@page "/"
@inject HttpClient Http
@inject NavigationManager Nav
@using Markdig

<PageTitle>Project Reporting</PageTitle>

<FluentCard Style="padding:1rem; margin-bottom:1rem;">
    <h2>Generate Project Completion Report</h2>
    <FluentStack Orientation="Orientation.Horizontal" Gap="10">
        <FluentNumberField @bind-Value="ProjectId" Placeholder="Project ID" Min="1"/>
        <FluentButton Appearance="Appearance.Accent" OnClick="GenerateReport" Disabled="IsLoading || ProjectId <= 0">Generate Report</FluentButton>
        <FluentButton Appearance="Appearance.Outline" OnClick="DownloadPdf" Disabled="IsLoading || Report is null || IsPdfLoading">@(IsPdfLoading ? "Generating PDF..." : "Download PDF")</FluentButton>
        @if (IsLoading)
        {
            <FluentProgressRing/>
        }
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <FluentMessageBar Intent="MessageIntent.Error">@ErrorMessage</FluentMessageBar>
        }
    </FluentStack>
</FluentCard>

@if (Report is not null)
{
    <FluentCard Style="padding:1rem;">
        <h2>@Report.ProjectName (#@Report.ProjectId)</h2>
        <p>
            <b>Status:</b> @Report.Summary?.Status
        </p>
        <p><b>Manager:</b> @Report.Summary?.Manager | <b>Company:</b> @Report.Summary?.Company</p>
        <p><b>Timeline:</b> @Report.Timeline?.PlannedDays d planned / @Report.Timeline?.TotalDays d actual (Var: @Report.Timeline?.VarianceDays)</p>
        <p><b>Budget:</b> @Report.Budget?.EstimatedHours h est / @Report.Budget?.ActualHours h actual (Var: @Report.Budget?.VarianceHours)</p>

        @if (!string.IsNullOrWhiteSpace(Report.AiGeneratedSummary))
        {
            <FluentAccordion>
                <FluentAccordionItem Heading="AI Summary">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Globe())" Color="Color.Neutral" Slot="start" />
                    <div>@(new MarkupString(AiSummaryHtml))</div>
                </FluentAccordionItem>
            </FluentAccordion>
        }

        <FluentTabs ActiveTabId="phasesTab">
            <FluentTab Id="phasesTab" Label="Phases">
                @if (Report.Phases is null || Report.Phases.Count == 0)
                {
                    <p>No phases.</p>
                }
                else
                {
                    <FluentDataGrid Items="@Report.Phases.AsQueryable()" GenerateFooter="false">
                        <PropertyColumn Property="@(p => p.PhaseName)" Title="Name"/>
                        <PropertyColumn Property="@(p => p.Status)" Title="Status"/>
                        <PropertyColumn Property="@(p => p.EstimatedHours)" Title="Est Hrs"/>
                        <PropertyColumn Property="@(p => p.ActualHours)" Title="Actual Hrs"/>
                    </FluentDataGrid>
                }
            </FluentTab>
            <FluentTab Id="ticketsTab" Label="Tickets">
                @if (Report.Tickets is null || Report.Tickets.Count == 0)
                {
                    <p>No tickets.</p>
                }
                else
                {
                    <FluentDataGrid Items="@Report.Tickets.AsQueryable()" GenerateFooter="false">
                        <PropertyColumn Property="@(t => t.TicketNumber)" Title="Number"/>
                        <PropertyColumn Property="@(t => t.Summary)" Title="Summary"/>
                        <PropertyColumn Property="@(t => t.Status)" Title="Status"/>
                        <PropertyColumn Property="@(t => t.EstimatedHours)" Title="Est Hrs"/>
                        <PropertyColumn Property="@(t => t.ActualHours)" Title="Actual Hrs"/>
                    </FluentDataGrid>
                }
            </FluentTab>
        </FluentTabs>
    </FluentCard>
}

@code {
    int ProjectId { get; set; }
    ProjectCompletionReportResponse? Report;
    bool IsLoading;
    bool IsPdfLoading;
    string? ErrorMessage;
    string AiSummaryHtml => Report?.AiGeneratedSummary is null ? string.Empty : Markdown.ToHtml(Report.AiGeneratedSummary);

    async Task GenerateReport()
    {
        ErrorMessage = null;
        IsLoading = true;
        Report = null;
        StateHasChanged();
        try
        {
            var req = new ProjectCompletionReportRequest { ProjectId = ProjectId };
            var httpResp = await Http.PostAsJsonAsync("api/reports/project-completion", req);
            if (!httpResp.IsSuccessStatusCode)
            {
                ErrorMessage = $"Failed: {httpResp.StatusCode}";
            }
            else
            {
                Report = await httpResp.Content.ReadFromJsonAsync<ProjectCompletionReportResponse>();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }

    async Task DownloadPdf()
    {
        if (Report is null) return;
        ErrorMessage = null;
        IsPdfLoading = true;
        try
        {
            var httpResp = await Http.GetAsync($"api/reports/project-completion/pdf/{Report.ProjectId}");
            if (!httpResp.IsSuccessStatusCode)
            {
                ErrorMessage = $"PDF failed: {httpResp.StatusCode}";
                return;
            }

            var bytes = await httpResp.Content.ReadAsByteArrayAsync();
            var base64 = Convert.ToBase64String(bytes);
            // Navigate to data URI triggers browser download dialogue for PDF inline view; user can save.
            Nav.NavigateTo($"data:application/pdf;base64,{base64}");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsPdfLoading = false;
        }
    }
}